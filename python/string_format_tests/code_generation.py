header = "\tvoid VOCAL_TRACT::update_A()"
doc ='''\n\t// This method is automatically generated by an external python
\t// script, not by pyphs\n'''
body = ""
N_lambda = 5

for i in range(N_lambda):
    for j in range(N_lambda):
        if i == j:
            body += f"\t\tA({i},{j}) = (*mu_{i+1}_add_mu_{i+2});\n"
        if j == i-1:
            body += f"\t\tA({i},{j}) = 0.5*(*mu_{i+1});\n"
        if j == i+1:
            body += f"\t\tA({i},{j}) = 0.5*(*mu_{i+2});\n"

method = header + '{' +  doc + body + "\t}"
prototype = header + ';'


####################################
############# core.h ###############
FN_old_core_h = "01_original/core.h"
FN_new_core_h = "02_generated/core.h"

# Protoypes à rentrer dans le core.h 
str_prototypes = '''
    //==========================================================================
    // New functions for the LDL.T solve update
    SpMat A;
    void ud_o_init();
    void A_update();
    void A_init();
    void RHS_update();
    Matrix<double, 5, 1> delta;
    Matrix<double, 5, 1> RHS_vec;

    Eigen::SimplicialCholesky <SpMat> solver;'''

# Includes à entrer au début du fichier
str_includes = '''
// new include ++++
#include <Eigen/SparseCholesky>
#include <Eigen/Sparse>
typedef Eigen::SparseMatrix<double> SpMat; '''

# Insertions
with open(FN_old_core_h, 'r') as old_f:
    with open(FN_new_core_h, 'w') as new_f:
        for line in old_f:
            new_f.write(line)
            if "parameters.h" in line:
                new_f.write(str_includes)
            if "void init()" in line:
                new_f.write(str_prototypes)
####################################
############ core.cpp ##############
